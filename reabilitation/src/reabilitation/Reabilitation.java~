package reabilitation;

import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Set;
import java.util.TreeMap;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.RowSorter;
import javax.swing.SwingConstants;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;

import customcomponent.CustomDialog;
import customcomponent.CustomLabel;
import customcomponent.CustomTextField;
import customcomponent.MenuPanel;
import customcomponent.ResultsPanel;
import customuiandrender.ButtonCustomUI;
import customuiandrender.ComboBoxCustomUI;
import customuiandrender.ComboBoxRenderer;
import customuiandrender.DateCellRenderer;
import customuiandrender.IconCellRenderer;
import customuiandrender.PanelCustomUI;
import customuiandrender.ScrollBarCustomUI;
import customuiandrender.TableHeaderRenderer;
import customuiandrender.TaskCellRenderer;
import customuiandrender.TextCellRenderer;
import defaults.ImageLinkDefaults;
import defaults.TextLinkDefaults;
import ori.jdatepicker.DatePicker;
import ori.jdatepicker.JDatePicker;
import tasks.AbstractTask;

public class Reabilitation extends JFrame {

	private static final long serialVersionUID = 2193812198591285704L;

	private Reabilitation reabilitation;
	public AbstractTask showedTask = null;

	private int width = 1000;
	private int height = 750;

	// ãëàâíàÿ ïàíåëü, çàäíèé ôîí
	BgPanel panel;

	// ïàíåëü ìåíþ
	JPanel menuPanel;

	// ïàíåëü ñîäåðæàíèÿ
	JPanel actualPanel;

	// ïàíåëü çàãîëîâêà
	JPanel headerPanel;

	// èêîíêè ìåíþ
	JLabel exitIcon;
	JLabel aboutIcon;
	JLabel helpIcon;
	JLabel tasksIcon;
	JLabel smallMenuAboutIcon;
	JLabel smallMenuBeginingIcon;
	JLabel smallMenuEndIcon;
	JLabel smallMenuResultsIcon;

	// ðàçìåð ëîãîòèïà (â ïîëîñêå ìåíþ) ïî ãîðèçîíòàëè
	private int logoSpace = 289;
	// ïðîáåë ìåæäó èêîíêàìè ìåíþ
	private int iconsSpace = 10;

	// äëÿ ïåðåòàñêàâàíèÿ îêíà
	private Point lastDragPosition;

	private TaskGroup[] taskGroups;
	private Task[] tasks;

	private int currentTaskGroup = 0;
	private int currentTask = 0;

	Popup popup = null;
	MenuPanel popupMenuPanel;

	public Reabilitation() {
		super("Reabilitation");
		setBounds(50, 50, width, height);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// óáðàòü ñòàíäàðòíóþ ïîëîñó çàãîëîâêà
		this.setUndecorated(true);

		reabilitation = this;

		InternalEventHandler internalEventHandler = new InternalEventHandler();
		long eventMask = MouseEvent.MOUSE_PRESSED;
		Toolkit.getDefaultToolkit().addAWTEventListener(internalEventHandler, eventMask);
		showFirstScreen();
	}

	/**
	 * Ïîêàçûâàåò íà÷àëüíûé ýêðàí äëÿ ïàöèåíòà èëè ñïåöèàëèñòà
	 * 
	 * @param specLogged
	 *            ôëàã òîãî, ÷òî çàëîãèíåí ñïåöèàëèñò
	 */
	private void start(boolean specLogged) {
		panel = new BgPanel(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.BACKGROUND));
		createMainMenu();

		actualPanel = new JPanel();
		actualPanel.setOpaque(false);

		headerPanel = new JPanel();
		headerPanel.setOpaque(false);
		headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.X_AXIS));
		headerPanel.setPreferredSize(new Dimension(width, 50));

		panel.setDoubleBuffered(true);
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		panel.add(Box.createVerticalStrut(10));
		panel.add(menuPanel);
		panel.add(Box.createVerticalStrut(20));
		panel.add(headerPanel);
		panel.add(actualPanel);
		panel.add(Box.createVerticalStrut(7));
		setContentPane(panel);

		menuPanel.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				lastDragPosition = e.getLocationOnScreen();
			}
		});

		menuPanel.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseDragged(MouseEvent e) {

				Point currentDragPosition = e.getLocationOnScreen();
				int deltaX = currentDragPosition.x - lastDragPosition.x;
				int deltaY = currentDragPosition.y - lastDragPosition.y;
				if (deltaX != 0 || deltaY != 0) {
					int x = getLocation().x + deltaX;
					int y = getLocation().y + deltaY;
					setLocation(x, y);
					lastDragPosition = currentDragPosition;
				}
			}
		});

		if (specLogged)
			showUsers();
		else
			showGroups();
	}

	/**
	 * Ïîêàçûâàåò ñïèñîê ïîëüçîâàòåëåé
	 */
	private void showUsers() {
		// TODO
		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c = new GridBagConstraints();

		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>ÏÎËÜÇÎÂÀÒÅËÈ</div></html>";
		heading.setText(t);

		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();

		String rows[][] = { { "8.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" },
				{ "9.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" }, { "10.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" },
				{ "18.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" }, { "28.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" },
				{ "3.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" }, { "2.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" },
				{ "6.04.2015", "Âåðáàëüíàÿ&nbsp;ïàìÿòü" }, { "4.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" },
				{ "1.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè" } };

		rows = HTTPClient.listPatients();

		UserTableModel model = new UserTableModel(rows);
		JTable table = new JTable(model);
		RowSorter<UserTableModel> sorter = new TableRowSorter<UserTableModel>(model);
		table.setRowSorter(sorter);

		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		table.setBorder(null);
		table.setShowGrid(false);
		table.setIntercellSpacing(new Dimension(-1, -1));
		table.getTableHeader().setReorderingAllowed(false);
		table.getColumn("¹").setCellRenderer(new TextCellRenderer(new Color(161, 136, 127), SwingConstants.CENTER));
		table.getColumn("¹ Êàðòû")
				.setCellRenderer(new TextCellRenderer(new Color(161, 136, 127), SwingConstants.CENTER));
		table.getColumn("Ïîëüçîâàòåëü")
				.setCellRenderer(new TextCellRenderer(new Color(69, 90, 100), SwingConstants.LEFT));
		table.getColumn("Ðåäàêòèðîâàíèå").setCellRenderer(new IconCellRenderer(SwingConstants.CENTER));
		table.getColumn("Óäàëåíèå").setCellRenderer(new IconCellRenderer(SwingConstants.CENTER));
		table.getTableHeader().setDefaultRenderer(new TableHeaderRenderer());
		// ajust rows and columns
		int tableHeight = 0;
		int tableWidth = 0;
		for (int row = 0; row < table.getRowCount(); row++) {
			int rowHeight = table.getRowHeight();
			for (int column = 0; column < table.getColumnCount(); column++) {
				Component comp = table.prepareRenderer(table.getCellRenderer(row, column), row, column);
				rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
			}
			table.setRowHeight(row, rowHeight);
			tableHeight += rowHeight;
		}
		TableColumnModel columnModel = table.getColumnModel();
		for (int column = 0; column < table.getColumnCount(); column++) {
			Component comp = table.prepareRenderer(table.getCellRenderer(0, column), 0, column);
			TableColumn col = columnModel.getColumn(column);
			TableCellRenderer headerRenderer = col.getHeaderRenderer();
			if (headerRenderer == null) {
				headerRenderer = table.getTableHeader().getDefaultRenderer();
			}
			Object headerValue = col.getHeaderValue();
			Component headerComp = headerRenderer.getTableCellRendererComponent(table, headerValue, false, false, 0,
					column);
			int maxWidth;
			if (column == 2)
				maxWidth = 500;
			else
				maxWidth = Math.max(comp.getPreferredSize().width, headerComp.getPreferredSize().width + 20);
			table.getColumnModel().getColumn(column).setPreferredWidth(maxWidth);
			tableWidth += maxWidth;
		}

		table.setPreferredScrollableViewportSize(
				new Dimension(Math.min(tableWidth, 900) + 10, Math.min(tableHeight, 500)));
		JScrollPane scroll = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroll.getVerticalScrollBar().setUI(new ScrollBarCustomUI());
		scroll.getHorizontalScrollBar().setUI(new ScrollBarCustomUI());
		scroll.setBorder(BorderFactory.createEmptyBorder());
		scroll.setOpaque(false);
		scroll.setMaximumSize(new Dimension(Math.min(tableWidth, 900) + 10, Math.min(tableHeight, 500)));
		c.anchor = GridBagConstraints.NORTH;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = GridBagConstraints.REMAINDER;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(40, 0, 0, 0);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 0.0;
		c.weighty = 1.0;

		actualPanel.add(scroll, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	/**
	 * Ïîêàçûâàåò çàñòàâêó
	 */
	private void showFirstScreen() {
		panel = new BgPanel(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.FIRST_SCREEN));
		setContentPane(panel);

		panel.setLayout(new GridBagLayout());
		JLabel heading = new JLabel();
		String t = "<html><div style='font: bold 24pt ArialNarrow; color: rgb(176, 190, 197);'>ÀÂÒÎÐÈÇÀÖÈß</div></html>";
		heading.setText(t);

		JRadioButton neww = new JRadioButton(
				"<html><div style='font: 14pt ArialNarrow; color: rgb(176, 190, 197);'>ÍÎÂÛÉ ÏÎËÜÇÎÂÀÒÅËÜ</div></html>");
		neww.setActionCommand("neww");
		neww.setSelected(true);
		neww.setOpaque(false);
		neww.setFocusable(false);

		JRadioButton enter = new JRadioButton(
				"<html><div style='font: 14pt ArialNarrow; color: rgb(176, 190, 197);'>ÂÕÎÄ</div></html>");
		enter.setActionCommand("enter");
		enter.setSelected(false);
		enter.setOpaque(false);
		enter.setFocusable(false);

		ButtonGroup group = new ButtonGroup();
		group.add(neww);
		group.add(enter);

		CustomTextField pass = new CustomTextField(30, "Íîìåð êàðòû");
		CustomTextField login = new CustomTextField(30, "ÔÈÎ");

		JButton loginSpec = new JButton("Óïðàâëåíèå ïîëüçîâàòåëÿìè");
		loginSpec.setUI(new ButtonCustomUI(new Color(96, 125, 139)));
		loginSpec.setBorder(null);
		loginSpec.setOpaque(false);
		loginSpec.setPreferredSize(new Dimension(200, 30));
		loginSpec.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		loginSpec.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO
				if (HTTPClient.loginSpec(login.getText().trim(), pass.getText().trim()))
					start(true);
			}
		});

		JButton start = new JButton("Âîéòè");
		start.setUI(new ButtonCustomUI(new Color(38, 166, 154)));
		start.setBorder(null);
		start.setOpaque(false);
		start.setPreferredSize(new Dimension(100, 30));
		start.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		start.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO
				if (HTTPClient.loginPatient(login.getText().trim(), pass.getText().trim()))
					start(false);
			}
		});

		GridBagConstraints c = new GridBagConstraints();

		c.anchor = GridBagConstraints.EAST;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = 1;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 2;
		c.gridy = 0;
		c.insets = new Insets(-200, 0, 0, 20);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 1.0;
		c.weighty = 0.0;

		this.add(loginSpec, c);

		c.anchor = GridBagConstraints.WEST;
		c.gridx = 0;
		c.gridy = 1;
		c.insets = new Insets(250, 315, 0, 0);
		c.weightx = 0.0;

		this.add(heading, c);

		c.insets = new Insets(20, 315, 0, 0);
		c.gridwidth = 1;
		c.gridy = 2;
		this.add(neww, c);

		c.insets = new Insets(20, 20, 0, 0);
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		this.add(enter, c);

		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(10, 315, 0, 0);
		c.gridwidth = 2;
		c.gridy = 3;
		c.gridx = 0;
		this.add(pass, c);

		c.gridy = 4;
		this.add(login, c);

		c.fill = GridBagConstraints.NONE;
		c.insets = new Insets(10, 0, 0, 0);
		c.anchor = GridBagConstraints.EAST;
		c.gridx = 0;
		c.gridy = 5;
		this.add(start, c);
	}

	private void createMainMenu() {
		exitIcon = new JLabel();
		aboutIcon = new JLabel();
		helpIcon = new JLabel();
		tasksIcon = new JLabel();

		MenuMouseListener l = new MenuMouseListener();

		ImageIcon icon = Utills
				.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_EXIT));
		exitIcon.setIcon(icon);
		exitIcon.setName("exit");
		exitIcon.addMouseListener(l);
		exitIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_ABOUT));
		aboutIcon.setIcon(icon);
		aboutIcon.setName("about");
		aboutIcon.addMouseListener(l);
		aboutIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_HELP));
		helpIcon.setIcon(icon);
		helpIcon.setName("help");
		helpIcon.addMouseListener(l);
		helpIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_TASKS));
		tasksIcon.setIcon(icon);
		tasksIcon.setName("tasks");
		tasksIcon.addMouseListener(l);
		tasksIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		JLabel userIcon = new JLabel();
		userIcon.setIcon(Utills.createImageIcon("resources/image/user.png"));

		JLabel userNameIcon = new JLabel();
		String t = "<html><div style='font: 14pt ArialNarrow; color: rgb(176, 190, 197);'>" + "ÏÎËÜÇÎÂÀÒÅËÜ: "
				+ "<span style='color: rgb(255, 183, 77);'>" + "Êàðòà ¹542" + "</span></div>"
				+ "<div style='font: 14pt ArialNarrow; color: rgb(255, 183, 77);'>" + "Èâàí Âàñèëüåâè÷ Àéáîëèòîâ"
				+ "</div></html>";
		userNameIcon.setText(t);

		menuPanel = new JPanel();
		menuPanel.setOpaque(false);
		menuPanel.setPreferredSize(new Dimension(width, exitIcon.getPreferredSize().height));
		menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.X_AXIS));
		menuPanel.add(Box.createHorizontalStrut(logoSpace + 25));
		menuPanel.add(userIcon);
		menuPanel.add(Box.createHorizontalStrut(iconsSpace));
		menuPanel.add(userNameIcon);
		menuPanel.add(Box.createHorizontalGlue());

		menuPanel.add(tasksIcon);
		menuPanel.add(Box.createHorizontalStrut(iconsSpace));
		menuPanel.add(helpIcon);
		menuPanel.add(Box.createHorizontalStrut(iconsSpace));
		menuPanel.add(aboutIcon);
		menuPanel.add(Box.createHorizontalStrut(iconsSpace));
		menuPanel.add(exitIcon);
		menuPanel.add(Box.createHorizontalStrut(iconsSpace));
	}

	private void createSmallMenu() {
		smallMenuAboutIcon = new JLabel();
		smallMenuBeginingIcon = new JLabel();
		smallMenuEndIcon = new JLabel();
		smallMenuResultsIcon = new JLabel();

		SmallMenuMouseListener l = new SmallMenuMouseListener();

		ImageIcon icon = Utills
				.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_ABOUT));
		smallMenuAboutIcon.setIcon(icon);
		smallMenuAboutIcon.setName("about");
		smallMenuAboutIcon.addMouseListener(l);
		smallMenuAboutIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills
				.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_BEGINING));
		smallMenuBeginingIcon.setIcon(icon);
		smallMenuBeginingIcon.setName("begining");
		smallMenuBeginingIcon.addMouseListener(l);
		smallMenuBeginingIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_END));
		smallMenuEndIcon.setIcon(icon);
		smallMenuEndIcon.setName("end");
		smallMenuEndIcon.addMouseListener(l);
		smallMenuEndIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		icon = Utills
				.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_RESULTS));
		smallMenuResultsIcon.setIcon(icon);
		smallMenuResultsIcon.setName("results");
		smallMenuResultsIcon.addMouseListener(l);
		smallMenuResultsIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		headerPanel.add(smallMenuAboutIcon);
		smallMenuAboutIcon.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalStrut(iconsSpace));

		headerPanel.add(smallMenuBeginingIcon);
		smallMenuBeginingIcon.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalStrut(iconsSpace));

		headerPanel.add(smallMenuEndIcon);
		smallMenuEndIcon.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalStrut(iconsSpace));

		headerPanel.add(smallMenuResultsIcon);
		smallMenuResultsIcon.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalStrut(iconsSpace));
		headerPanel.revalidate();
		headerPanel.repaint();
	}

	/**
	 * Ïîêàçàòü ãðóïïû çàäàíèé
	 */
	private void showGroups() {
		showedTask = null;
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>ÃÐÓÏÏÛ ÓÏÐÀÆÍÅÍÈÉ</div></html>";
		heading.setText(t);

		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();

		JPanel p = new JPanel();
		JTextPane text = new JTextPane();
		text.setEditable(false);
		text.setContentType("text/html;charset=utf-8");

		try {
			text.setPage(getClass().getResource(TextLinkDefaults.getInstance().getLink(TextLinkDefaults.Key.WELCOME)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		text.setOpaque(false);
		p.add(text);
		text.setPreferredSize(new Dimension((int) (width * 0.9), 150));
		p.setUI(new PanelCustomUI(true));

		Document doc = Utills.openXML(TextLinkDefaults.getInstance().getLink(TextLinkDefaults.Key.GROUPS));

		NodeList n = doc.getElementsByTagName("group");
		NamedNodeMap k = null;

		JLabel[] groups = new JLabel[n.getLength()];
		taskGroups = new TaskGroup[n.getLength()];

		ImageIcon icon;
		GroupsMouseListener l = new GroupsMouseListener();
		for (int i = 0; i < n.getLength(); i++) {
			k = n.item(i).getAttributes();
			taskGroups[i] = new TaskGroup(k.getNamedItem("name").getNodeValue(), k.getNamedItem("text").getNodeValue(),
					k.getNamedItem("image").getNodeValue(), k.getNamedItem("bigImage").getNodeValue(),
					k.getNamedItem("rolloverImage").getNodeValue(), k.getNamedItem("toolTipText").getNodeValue());

			icon = Utills.createImageIcon(taskGroups[i].getImage());
			groups[i] = new CustomLabel();
			groups[i].setIcon(icon);
			groups[i].setHorizontalTextPosition(JLabel.CENTER);
			groups[i].setVerticalTextPosition(JLabel.BOTTOM);
			groups[i].setName(Integer.toString(i));
			groups[i].addMouseListener(l);
			groups[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			groups[i].createToolTip();
			groups[i].setToolTipText("<html><div style='font: bold 14pt ArialNarrow; color: #455a64; padding: 5px;'>"
					+ taskGroups[i].getName().toUpperCase() + "</div>"
					+ "<div style='font: 14pt ArialNarrow; color: #455a64; padding: 5px;'>"
					+ taskGroups[i].getToolTipText() + "</div></html>");
		}

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c = new GridBagConstraints();
		c.anchor = GridBagConstraints.CENTER;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = 1;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(40, 20, 10, 20);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 0.0;
		c.weighty = 0.0;

		int i;
		for (i = 0; i < Math.ceil((double) groups.length / 5); i++) {
			for (int j = 0; j < 5; j++) {
				if ((i * 5 + j) == groups.length)
					break;
				c.gridx = j;
				c.gridy = i;

				actualPanel.add(groups[i * 5 + j], c);
			}
		}

		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 0;
		c.gridy = i;
		c.insets = new Insets(10, 20, 10, 20);

		actualPanel.add(p, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	/**
	 * Ïðî÷èòàòü çàäàíèÿ äëÿ ãðóïïû.
	 * 
	 * @param i
	 *            íîìåð ãðóïïû
	 */
	private void readTasks(int i) {
		Document doc = Utills.openXML(TextLinkDefaults.getInstance().getLink(TextLinkDefaults.Key.GROUPS));

		NodeList n = doc.getElementsByTagName("group");
		NamedNodeMap k = null;

		NodeList n1 = n.item(i).getChildNodes();
		tasks = new Task[n1.getLength()];

		for (int j = 0; j < n1.getLength(); j++) {
			k = n1.item(j).getAttributes();
			tasks[j] = new Task(k.getNamedItem("name").getNodeValue(), k.getNamedItem("image").getNodeValue(),
					k.getNamedItem("shortText").getNodeValue(), k.getNamedItem("longText").getNodeValue(),
					k.getNamedItem("longLongText").getNodeValue(), k.getNamedItem("bigImage").getNodeValue(),
					k.getNamedItem("className").getNodeValue(), k.getNamedItem("rolloverImage").getNodeValue());
		}
	}

	/**
	 * Ïîêàçàòü óïðàæíåíèÿ âíóòðè ãðóïïû.
	 * 
	 * @param i
	 *            íîìåð ãðóïïû
	 */
	public void showTasks(int i) {
		showedTask = null;
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>"
				+ taskGroups[i].getName().toUpperCase() + "</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				showGroups();
			}
		});
		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();

		JLabel image = new JLabel();
		icon = Utills.createImageIcon(taskGroups[i].getBigImage());
		image.setIcon(icon);

		JTextPane text = new JTextPane();
		text.setEditable(false);
		text.setContentType("text/html;charset=utf-8");
		text.setText("<html><div style='font: 14pt ArialNarrow; color: rgb(68, 83, 91);'>" + taskGroups[i].getText()
				+ "</div></html>");
		text.setOpaque(false);
		text.setPreferredSize(
				new Dimension((int) (width * 0.85 - image.getPreferredSize().getWidth()), Utills.calculateTextHeight(
						text.getText(), (int) (width * 0.85 - image.getPreferredSize().getWidth()), text)));

		readTasks(i);

		JPanel p = new JPanel();
		p.setOpaque(false);
		p.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		JLabel[] tasksLabels = new JLabel[tasks.length];
		TasksMouseListener l = new TasksMouseListener();

		for (int j = 0; j < Math.ceil((double) tasks.length / 2); j++) {
			for (int k = 0; k < 2; k++) {
				if ((j * 2 + k) == tasks.length)
					break;
				icon = Utills.createImageIcon(tasks[j * 2 + k].getImage());
				tasksLabels[j * 2 + k] = new JLabel(
						"<html><div style='font: 16pt ArialNarrow; color: rgb(115, 84, 73); text-align: center;'>"
								+ "ÇÀÄÀÍÈÅ ¹" + Integer.toString(j * 2 + k + 1) + ". "
								+ tasks[j * 2 + k].getName().toUpperCase()
								+ "</div><div style='font: 10pt ArialNarrow; color: rgb(115, 84, 73); text-align: left;'>"
								+ tasks[j * 2 + k].getShortText() + "</div></html>");
				tasksLabels[j * 2 + k].setIcon(icon);
				tasksLabels[j * 2 + k].setHorizontalTextPosition(JLabel.CENTER);
				tasksLabels[j * 2 + k].setVerticalTextPosition(JLabel.BOTTOM);
				tasksLabels[j * 2 + k].setPreferredSize(new Dimension(icon.getIconWidth() + 100,
						(int) (tasksLabels[j * 2 + k].getPreferredSize().getHeight() + 100)));
				tasksLabels[j * 2 + k].setName(Integer.toString(j * 2 + k));
				tasksLabels[j * 2 + k].addMouseListener(l);
				tasksLabels[j * 2 + k].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
				c.anchor = GridBagConstraints.CENTER;
				c.fill = GridBagConstraints.NONE;
				c.gridheight = 1;
				c.gridwidth = 1;
				c.gridx = k;
				c.gridy = j;
				c.insets = new Insets(0, 0, 0, 0);
				c.ipadx = 0;
				c.ipady = 0;
				c.weightx = 1.0;
				c.weighty = 0.0;

				p.add(tasksLabels[j * 2 + k], c);
			}
		}

		JScrollPane scroll = new JScrollPane(p);
		scroll.setPreferredSize(new Dimension((int) (text.getPreferredSize().getWidth()),
				(int) (height * 0.7 - text.getPreferredSize().getHeight())));
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		scroll.getViewport().setOpaque(false);
		scroll.setOpaque(false);
		scroll.setBorder(null);
		scroll.getVerticalScrollBar().setUI(new ScrollBarCustomUI());

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		c.anchor = GridBagConstraints.NORTH;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = GridBagConstraints.REMAINDER;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(40, 40, 0, 0);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 0.0;
		c.weighty = 0.0;

		actualPanel.add(image, c);

		c.anchor = GridBagConstraints.CENTER;
		c.gridheight = 1;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		c.insets = new Insets(40, 40, 0, 40);
		c.weightx = 1.0;

		actualPanel.add(text, c);

		c.gridy = 1;
		c.weightx = 0.0;

		actualPanel.add(scroll, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	/**
	 * Ïîêàçàòü îïèñàíèå çàäàíèÿ ñ íîìåðîì i.
	 * 
	 * @param i
	 *            íîìåð çàäàíèÿ âíóòðè ãðóïïû
	 */
	private void showTaskInfo(int i) {
		showedTask = null;
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>" + "ÇÀÄÀÍÈÅ ¹"
				+ Integer.toString(i + 1) + ": " + tasks[i].getName().toUpperCase() + "</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				showTasks(currentTaskGroup);
			}
		});

		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();
		createSmallMenu();

		JLabel image = new JLabel();
		icon = Utills.createImageIcon(tasks[i].getBigImage());
		image.setIcon(icon);

		JTextPane text = new JTextPane();
		text.setEditable(false);
		text.setContentType("text/html;charset=utf-8");
		text.setText("<html><div style='font: 20pt ArialNarrow; color: rgb(115, 84, 73);'>"
				+ tasks[i].getName().toUpperCase()
				+ "</div><div  style='font: 14pt ArialNarrow; color: rgb(115, 84, 73);'>" + tasks[i].getLongText()
				+ "</div></html>");
		text.setOpaque(false);
		text.setPreferredSize(new Dimension((int) (width * 0.85 - image.getPreferredSize().getWidth()),
				100 + Utills.calculateTextHeight(text.getText(),
						(int) (width * 0.85 - image.getPreferredSize().getWidth()), text)));

		JButton start = new JButton("Íà÷àòü óïðàæíåíèå");
		start.setUI(new ButtonCustomUI(new Color(38, 166, 154)));
		start.setBorder(null);
		start.setOpaque(false);
		start.setPreferredSize(new Dimension(200, 30));
		start.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		start.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showTask(i);
			}
		});

		GridBagConstraints c = new GridBagConstraints();

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		c.anchor = GridBagConstraints.NORTH;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = GridBagConstraints.REMAINDER;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(-200, 40, 0, 0);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 0.0;
		c.weighty = 0.0;

		actualPanel.add(image, c);

		c.gridheight = 1;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		c.insets = new Insets(-200, 40, 0, 40);
		c.weightx = 1.0;

		actualPanel.add(text, c);

		c.gridy = 1;
		c.insets = new Insets(40, 40, 0, 40);
		actualPanel.add(start, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	private void showAbout() {
		showedTask = null;
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>Î ÏÐÎÃÐÀÌÌÅ</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				showGroups();
			}
		});
		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();

		JLabel key = new JLabel();
		t = "<html><div style='font: 14pt ArialNarrow; color: rgb(68, 83, 91);'>ÊËÞ×: <span style='color: rgb(115, 84, 73);'>1234123412341234234</span></div></html>";
		key.setText(t);

		JLabel licenze = new JLabel();
		t = "<html><div style='font: 14pt ArialNarrow; color: rgb(68, 83, 91);'>ËÈÖÅÍÇÈß: <br><span style='color: rgb(115, 84, 73);'>Âàñèëüåâ Àëüáåðò Ïåòðîâè÷ îò 15.06.2015</span></div></html>";
		licenze.setText(t);

		JLabel left = new JLabel();
		t = "<html><div style='font: 14pt ArialNarrow; color: rgb(68, 83, 91);'>Îñòàëîñü: <span style='color: rgb(115, 84, 73);'>254 äíÿ</span></div></html>";
		left.setText(t);

		JLabel version = new JLabel();
		t = "<html><div style='font: 14pt ArialNarrow; color: rgb(68, 83, 91);'>ÂÅÐÑÈß ÏÐÎÃÐÀÌÌÛ: <span style='color: rgb(115, 84, 73);'>1.036 îò 12.06.2015</span></div></html>";
		version.setText(t);

		JButton checkUpdates = new JButton("Ïðîâåðèòü îáíîâëåíèÿ");
		icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.CIRCLE_ARROW));
		checkUpdates.setIcon(icon);
		checkUpdates.setUI(new ButtonCustomUI(new Color(38, 166, 154)));
		checkUpdates.setBorder(null);
		checkUpdates.setOpaque(false);
		checkUpdates.setPreferredSize(new Dimension(200, 30));
		checkUpdates.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		JCheckBox checkAuto = new JCheckBox(
				"<html><div style='font: 14pt ArialNarrow; color: rgb(115, 84, 73);'>Ïðîâåðÿòü îáíîâëåíèÿ àâòîìàòè÷åñêè</div></html>");
		checkAuto.setOpaque(false);

		JLabel about = new JLabel();
		t = "<html><div style='font: 20pt ArialNarrow; color: rgb(115, 84, 73);'>Î ÏÐÎÃÐÀÌÌÅ</div></html>";
		about.setText(t);

		JTextPane text = new JTextPane();
		text.setEditable(false);
		text.setContentType("text/html;charset=utf-8");

		try {
			text.setPage(getClass().getResource(TextLinkDefaults.getInstance().getLink(TextLinkDefaults.Key.ABOUT)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		JScrollPane scroll = new JScrollPane(text);
		scroll.setPreferredSize(new Dimension((int) (width * 0.95), (int) (height * 0.5)));
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scroll.setBorder(null);
		scroll.getVerticalScrollBar().setUI(new ScrollBarCustomUI());

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c = new GridBagConstraints();

		c.anchor = GridBagConstraints.WEST;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = 1;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(40, 40, 0, 0);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 1.0;
		c.weighty = 0.0;

		actualPanel.add(key, c);

		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		c.insets = new Insets(40, 0, 0, 0);

		actualPanel.add(version, c);

		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 1;
		c.insets = new Insets(20, 40, 0, 0);
		c.weightx = 0.0;

		actualPanel.add(licenze, c);

		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		c.insets = new Insets(20, 0, 0, 0);

		actualPanel.add(checkUpdates, c);

		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 2;
		c.insets = new Insets(20, 40, 0, 0);

		actualPanel.add(left, c);

		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 1;
		c.gridy = 2;
		c.insets = new Insets(20, 0, 0, 0);

		actualPanel.add(checkAuto, c);

		JSeparator sep = new JSeparator(SwingConstants.HORIZONTAL);
		sep.setBackground(new Color(176, 190, 197));
		sep.setForeground(new Color(176, 190, 197));
		sep.setPreferredSize(new Dimension((int) (scroll.getPreferredSize().getWidth() * 0.98), 1));

		c.gridx = 0;
		c.gridy = 3;
		c.insets = new Insets(20, 40, 0, 20);

		actualPanel.add(sep, c);

		c.gridy = 4;
		c.insets = new Insets(20, 40, 0, 0);

		actualPanel.add(about, c);

		c.gridy = 5;
		c.insets = new Insets(0, 20, 0, 0);

		actualPanel.add(scroll, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	private void showHelp() {
		showedTask = null;
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>ÏÎÌÎÙÜ</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				showGroups();
			}
		});
		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		headerPanel.revalidate();
		headerPanel.repaint();

		JLabel faq = new JLabel();
		String t1 = "<html><div style='font: 22pt ArialNarrow; color: rgb(115, 84, 73); padding-left: 17px;'><span style='font-weight: bold;'>?</span>×ÀÑÒÎ ÇÀÄÀÂÀÅÌÛÅ ÂÎÏÐÎÑÛ</div></html>";
		faq.setText(t1);

		JTextPane text = new JTextPane();
		text.setEditable(false);
		text.setContentType("text/html;charset=utf-8");

		try {
			text.setPage(getClass().getResource(TextLinkDefaults.getInstance().getLink(TextLinkDefaults.Key.FAQ)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c = new GridBagConstraints();

		c.anchor = GridBagConstraints.WEST;
		c.fill = GridBagConstraints.NONE;
		c.gridheight = 1;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 0, 0);
		c.ipadx = 0;
		c.ipady = 0;
		c.weightx = 0.0;
		c.weighty = 0.0;

		actualPanel.add(faq, c);

		JScrollPane scroll = new JScrollPane(text);
		scroll.setPreferredSize(new Dimension((int) (width * 0.95), (int) (height * 0.7)));
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scroll.setBorder(null);
		scroll.getVerticalScrollBar().setUI(new ScrollBarCustomUI());

		c.gridy = 1;

		actualPanel.add(scroll, c);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	/**
	 * Ïîêàçàòü çàäàíèå ñ íîìåðîì i
	 * 
	 * @param i
	 *            íîìåð çàäàíèÿ âíóòðè ãðóïïû
	 */
	private void showTask(int i) {
		String s = tasks[i].getClassName();
		Class c;
		Class[] intArgsClass = new Class[] { int.class, int.class, String.class, JFrame.class };
		// TODO íå îò áàëäû
		Integer h = new Integer((int) (height * 0.75));
		Integer w = new Integer(970);
		String t1 = tasks[i].getLongLongText();
		Object[] intArgs = new Object[] { w, h, t1, reabilitation };
		Constructor intArgsConstructor = null;
		AbstractTask p = null;
		try {
			c = Class.forName(s);
			intArgsConstructor = c.getConstructor(intArgsClass);
			p = (AbstractTask) Utills.createObject(intArgsConstructor, intArgs);
		} catch (ClassNotFoundException | NoSuchMethodException | SecurityException e1) {
			e1.printStackTrace();
		}

		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>" + "ÇÀÄÀÍÈÅ ¹"
				+ Integer.toString(i + 1) + ": " + tasks[i].getName().toUpperCase() + "</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent arg0) {
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showTaskInfo(i);
					else if (showedTask != null)
						showedTask.start();
				} else
					showTaskInfo(i);
			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
			}

			@Override
			public void mousePressed(MouseEvent arg0) {
			}

			@Override
			public void mouseReleased(MouseEvent arg0) {
			}

		});
		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		createSmallMenu();
		headerPanel.revalidate();
		headerPanel.repaint();

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c1 = new GridBagConstraints();

		c1.anchor = GridBagConstraints.WEST;
		c1.fill = GridBagConstraints.NONE;
		c1.gridheight = 1;
		c1.gridwidth = GridBagConstraints.REMAINDER;
		c1.gridx = 0;
		c1.gridy = 0;
		c1.insets = new Insets(30, 0, 0, 0);
		c1.ipadx = 0;
		c1.ipady = 0;
		c1.weightx = 0.0;
		c1.weighty = 0.0;

		actualPanel.add(p, c1);
		showedTask = p;

		actualPanel.revalidate();
	}

	/**
	 * Ïîêàçûâàåò ñòàòèñòèêó ðåçóëüòàòîâ äëÿ îïðåäåëåííîãî ïîëüçîâàòåëÿ
	 * 
	 * @param userName
	 *            èìÿ ïîëüçîâàòåëÿ
	 */
	public void showResults(String userName) {
		JLabel heading = new JLabel();
		String t = "<html><div style='font: 20pt ArialNarrow; color: rgb(68, 83, 91);'>" + "ÐÅÇÓËÜÒÀÒÛ: "
				+ userName.toUpperCase() + "</div></html>";
		heading.setText(t);
		ImageIcon icon = Utills.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.ARROW));
		heading.setIcon(icon);
		heading.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		heading.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				// TODO what to show?
				showTasks(currentTaskGroup);
			}
		});
		headerPanel.removeAll();
		headerPanel.add(Box.createHorizontalStrut(20));
		headerPanel.add(heading);
		heading.setAlignmentY(BOTTOM_ALIGNMENT);
		headerPanel.add(Box.createHorizontalGlue());
		createSmallMenu();
		headerPanel.revalidate();
		headerPanel.repaint();

		actualPanel.removeAll();
		actualPanel.setLayout(new GridBagLayout());

		GridBagConstraints c1 = new GridBagConstraints();

		JLabel subHeading = new JLabel();
		t = "<html><div style='font: 20pt ArialNarrow; color: rgb(115, 84, 73);'>ÄÈÍÀÌÈÊÀ&nbsp;ÓËÓ×ØÅÍÈß&nbsp;ÐÅÇÓËÜÒÀÒÎÂ&nbsp;ÏÐÎÕÎÆÄÅÍÈß&nbsp;ÇÀÄÀÍÈÉ</div></html>";
		subHeading.setText(t);

		c1.anchor = GridBagConstraints.WEST;
		c1.fill = GridBagConstraints.NONE;
		c1.gridheight = 1;
		c1.gridwidth = GridBagConstraints.REMAINDER;
		c1.gridx = 0;
		c1.gridy = 0;
		c1.insets = new Insets(20, 20, 0, 0);
		c1.ipadx = 0;
		c1.ipady = 0;
		c1.weightx = 0.0;
		c1.weighty = 0.0;

		actualPanel.add(subHeading, c1);

		JLabel filter = new JLabel();
		t = "<html><div style='font: bold 16pt ArialNarrow; color: rgb(68, 83, 91);'>" + "ÔÈËÜÒÐ" + "</div></html>";
		filter.setText(t);

		JPanel p = new JPanel();
		p.setOpaque(false);
		p.setLayout(new GridBagLayout());
		p.setPreferredSize(new Dimension(width, 40));

		c1.gridwidth = 1;
		c1.insets = new Insets(10, 20, 0, 0);
		c1.weightx = 1.0;
		p.add(filter, c1);

		String[] tasksStrings = { "Ñóäîêó", "Ñîâïàäåíèÿ", "Ñëîâà", "Ñëóõîâîå âîñïðèÿòèå", "Ïóòåøåñòâèå" };
		JComboBox tasks = new JComboBox(tasksStrings);
		tasks.setRenderer(new ComboBoxRenderer());
		tasks.setUI(new ComboBoxCustomUI(tasksStrings));
		tasks.setOpaque(false);

		c1.insets = new Insets(10, 0, 0, 0);
		c1.gridx = 1;
		p.add(tasks, c1);

		JLabel interval = new JLabel();
		t = "<html><div style='font: 16pt ArialNarrow; color: rgb(68, 83, 91);'>" + "Èíòåðâàë" + "</div></html>";
		interval.setText(t);

		c1.gridx = 2;
		p.add(interval, c1);

		// TODO date
		DatePicker date1 = new JDatePicker();
		date1.setShowYearButtons(true);

		c1.gridx = 3;
		p.add((Component) date1, c1);

		JLabel def = new JLabel();
		def.setOpaque(true);
		def.setBackground(new Color(176, 190, 197));
		def.setPreferredSize(new Dimension(20, 5));

		c1.gridx = 4;
		p.add(def, c1);

		DatePicker date2 = new JDatePicker();
		date1.setShowYearButtons(true);

		c1.gridx = 5;
		p.add((Component) date2, c1);

		JButton show = new JButton("Ïîêàçàòü");
		show.setUI(new ButtonCustomUI(new Color(38, 166, 154)));
		show.setBorder(null);
		show.setOpaque(false);
		show.setPreferredSize(new Dimension(100, 30));
		show.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		show.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO
			}
		});

		c1.gridx = 6;
		p.add(show, c1);

		c1.fill = GridBagConstraints.HORIZONTAL;
		c1.gridwidth = GridBagConstraints.REMAINDER;
		c1.gridx = 0;
		c1.gridy = 1;
		c1.insets = new Insets(0, 0, 0, 0);
		c1.weightx = 0.0;

		actualPanel.add(p, c1);

		// TODO sort
		String rows[][] = { { "8.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "180" },
				{ "9.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "210" },
				{ "10.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "100" },
				{ "18.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "220" },
				{ "28.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñëóõîâîå&nbsp;âîñïðèÿòèå", "150" },
				{ "3.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "150" },
				{ "2.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "160" },
				{ "6.04.2015", "Âåðáàëüíàÿ&nbsp;ïàìÿòü", "Ñëîâà", "200" },
				{ "4.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "170" },
				{ "1.04.2015", "Èñïîëíèòåëüíûå&nbsp;ôóíêöèè", "Ñóäîêó", "200" } };

		ArrayList<String> a = new ArrayList<String>();
		for (int i = 0; i < rows.length; i++)
			if (!a.contains(rows[i][2]))
				a.add(rows[i][2]);
		Results[] r = new Results[a.size()];
		for (int i = 0; i < a.size(); i++) {
			TreeMap<Date, Integer> map = new TreeMap<Date, Integer>();
			for (int j = 0; j < rows.length; j++)
				if (rows[j][2].equals(a.get(i))) {
					SimpleDateFormat df = new SimpleDateFormat("dd.mm.yyyy");
					Date result = null;
					try {
						result = df.parse(rows[j][0]);
					} catch (ParseException e) {
						e.printStackTrace();
					}
					map.put(result, Integer.parseInt(rows[j][3]));
					rows[j][2] += " " + ResultsPanel.getColors()[i].getRed();
					rows[j][2] += "," + ResultsPanel.getColors()[i].getGreen();
					rows[j][2] += "," + ResultsPanel.getColors()[i].getBlue();
				}
			r[i] = new Results(map, a.get(i));
		}

		ResultsPanel resultsPanel = new ResultsPanel(r, 400, 500);

		c1.anchor = GridBagConstraints.NORTHWEST;
		c1.fill = GridBagConstraints.NONE;
		c1.gridwidth = 1;
		c1.gridy = 2;
		c1.insets = new Insets(30, 20, 0, 0);
		c1.weightx = 1.0;
		actualPanel.add(resultsPanel, c1);

		TableModel model = new TableModel(rows);
		JTable table = new JTable(model);
		RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
		table.setRowSorter(sorter);
		JScrollPane scroll = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroll.getVerticalScrollBar().setUI(new ScrollBarCustomUI());
		scroll.getHorizontalScrollBar().setUI(new ScrollBarCustomUI());
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		table.setBorder(null);
		table.setShowGrid(false);
		table.setIntercellSpacing(new Dimension(-1, -1));
		table.getTableHeader().setReorderingAllowed(false);
		// table.getTableHeader().setResizingAllowed(false);
		table.getColumn("Äàòà").setCellRenderer(new DateCellRenderer("dd.mm.yyyy"));
		table.getColumn("Óïðàæíåíèå")
				.setCellRenderer(new TextCellRenderer(new Color(69, 90, 100), SwingConstants.CENTER));
		table.getColumn("Ðåçóëüòàò")
				.setCellRenderer(new TextCellRenderer(new Color(69, 90, 100), SwingConstants.CENTER));
		table.getColumn("Çàäàíèå").setCellRenderer(new TaskCellRenderer());
		table.getTableHeader().setDefaultRenderer(new TableHeaderRenderer());
		// ajust rows and columns
		int tableHeight = 0;
		int tableWidth = 0;
		for (int row = 0; row < table.getRowCount(); row++) {
			int rowHeight = table.getRowHeight();
			for (int column = 0; column < table.getColumnCount(); column++) {
				Component comp = table.prepareRenderer(table.getCellRenderer(row, column), row, column);
				rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
			}
			table.setRowHeight(row, rowHeight);
			tableHeight += rowHeight;
		}
		TableColumnModel columnModel = table.getColumnModel();
		for (int column = 0; column < table.getColumnCount(); column++) {
			Component comp = table.prepareRenderer(table.getCellRenderer(0, column), 0, column);
			TableColumn col = columnModel.getColumn(column);
			TableCellRenderer headerRenderer = col.getHeaderRenderer();
			if (headerRenderer == null) {
				headerRenderer = table.getTableHeader().getDefaultRenderer();
			}
			Object headerValue = col.getHeaderValue();
			Component headerComp = headerRenderer.getTableCellRendererComponent(table, headerValue, false, false, 0,
					column);
			int maxWidth = Math.max(comp.getPreferredSize().width, headerComp.getPreferredSize().width + 20);
			table.getColumnModel().getColumn(column).setPreferredWidth(maxWidth);
			tableWidth += maxWidth;
		}
		table.setPreferredScrollableViewportSize(new Dimension(Math.min(400, tableWidth), Math.min(400, tableHeight)));
		scroll.setBorder(BorderFactory.createEmptyBorder());
		scroll.setOpaque(false);

		c1.gridwidth = GridBagConstraints.REMAINDER;
		c1.insets = new Insets(60, 0, 0, 0);
		c1.gridx = 1;
		c1.gridy = 2;
		actualPanel.add(scroll, c1);

		actualPanel.revalidate();
		actualPanel.repaint();
	}

	/**
	 * Ïàíåëü, îòðèñîâûâàþùàÿ çàäíèé ôîí, è ñëóæàùàÿ êîìïàíîâùèêîì îñòàëüíûõ
	 * ïàíåëåé.
	 * 
	 * @author Pokrovskaya Oksana
	 *
	 */
	class BgPanel extends JPanel {
		String image;

		public BgPanel(String backgroundPath) {
			image = backgroundPath;
		}

		public void paintComponent(Graphics g) {
			Image im = null;
			try {
				im = ImageIO.read(getClass().getResource(image));
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println("problem reading file " + image);
			}
			g.drawImage(im, 0, 0, null);
		}
	}

	class MenuMouseListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			switch (l.getName()) {
			case "exit":
				if (showedTask != null)
					showedTask.pause();
				CustomDialog d = new CustomDialog(reabilitation,
						"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;âûéòè&nbsp;èç&nbsp;ïðîãðàììû?", "Âûéòè", "Îòìåíà");
				if (d.getAnswer() == 1)
					System.exit(0);
				else if (showedTask != null)
					showedTask.start();
				break;
			case "help":
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showHelp();
					else if (showedTask != null)
						showedTask.start();
				} else
					showHelp();
				break;
			case "about":
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showAbout();
					else if (showedTask != null)
						showedTask.start();
				} else
					showAbout();
				break;
			case "tasks":
				PopupFactory fac = new PopupFactory();
				Point xy = tasksIcon.getLocationOnScreen();
				MenuPanel p = new MenuPanel(popup, reabilitation);
				popupMenuPanel = p;
				popup = fac.getPopup(tasksIcon, p,
						(int) ((int) xy.getX() - popupMenuPanel.getPreferredSize().getWidth() + tasksIcon.getWidth()),
						(int) (xy.getY() + tasksIcon.getHeight() + 12));
				popup.show();
				break;
			}
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			ImageIcon icon;
			switch (l.getName()) {
			case "exit":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_EXIT_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "help":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_HELP_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "about":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_ABOUT_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "tasks":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_TASKS_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			}
		}

		@Override
		public void mouseExited(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			ImageIcon icon;
			switch (l.getName()) {
			case "exit":
				icon = Utills
						.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_EXIT));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "help":
				icon = Utills
						.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_HELP));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "about":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_ABOUT));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "tasks":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.MAIN_MENU_TASKS));
				l.setIcon(icon);
				l.updateUI();
				break;
			}
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
		}
	}

	class SmallMenuMouseListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			switch (l.getName()) {
			case "about":
				// TODO the same?
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showTaskInfo(currentTask);
					else if (showedTask != null)
						showedTask.start();
				} else
					showTaskInfo(currentTask);
				break;
			case "begining":
				// TODO the same?
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showTaskInfo(currentTask);
					else if (showedTask != null)
						showedTask.start();
				} else
					showTaskInfo(currentTask);
				break;
			case "end":
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showTasks(currentTaskGroup);
					else if (showedTask != null)
						showedTask.start();
				} else
					showTasks(currentTaskGroup);
				break;
			case "results":
				if (showedTask != null) {
					showedTask.pause();
					CustomDialog d1 = new CustomDialog(reabilitation,
							"Âû&nbsp;óâåðåíû, ÷òî&nbsp;õîòèòå&nbsp;ïðåðâàòü&nbsp;âûïîëíåíèå çàäàíèÿ?", "Ïðåðâàòü",
							"Îòìåíà");
					if (d1.getAnswer() == 1)
						showResults("Èâàí Âàñèëüåâè÷ Àéáîëèòîâ");
					else if (showedTask != null)
						showedTask.start();
				} else
					showResults("Èâàí Âàñèëüåâè÷ Àéáîëèòîâ");
				break;
			}
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			ImageIcon icon;
			switch (l.getName()) {
			case "about":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_ABOUT_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "begining":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_BEGINING_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "end":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_END_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "results":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_RESULTS_ROLLOVER));
				l.setIcon(icon);
				l.updateUI();
				break;
			}
		}

		@Override
		public void mouseExited(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			ImageIcon icon;
			switch (l.getName()) {
			case "about":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_ABOUT));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "begining":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_BEGINING));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "end":
				icon = Utills
						.createImageIcon(ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_END));
				l.setIcon(icon);
				l.updateUI();
				break;
			case "results":
				icon = Utills.createImageIcon(
						ImageLinkDefaults.getInstance().getLink(ImageLinkDefaults.Key.SMALL_MENU_RESULTS));
				l.setIcon(icon);
				l.updateUI();
				break;
			}
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
		}
	}

	class GroupsMouseListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			currentTaskGroup = i;
			showTasks(i);
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			ImageIcon icon = Utills.createImageIcon(taskGroups[i].getRolloverImage());
			l.setIcon(icon);
			l.updateUI();
		}

		@Override
		public void mouseExited(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			ImageIcon icon = Utills.createImageIcon(taskGroups[i].getImage());
			l.setIcon(icon);
			l.updateUI();
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
		}
	}

	class TasksMouseListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			currentTask = i;
			showTaskInfo(i);
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			ImageIcon icon = Utills.createImageIcon(tasks[i].getRolloverImage());
			l.setIcon(icon);
			l.updateUI();
		}

		@Override
		public void mouseExited(MouseEvent e) {
			JLabel l = (JLabel) e.getSource();
			int i = Integer.parseInt(l.getName());
			ImageIcon icon = Utills.createImageIcon(tasks[i].getImage());
			l.setIcon(icon);
			l.updateUI();
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
		}
	}

	private class InternalEventHandler implements AWTEventListener {

		@Override
		public void eventDispatched(AWTEvent event) {
			if (popup == null)
				return;
			if (MouseEvent.MOUSE_CLICKED == event.getID() && event.getSource() != tasksIcon) {
				Set<Component> components = Utills.getAllComponents(popupMenuPanel);
				boolean clickInPopup = false;
				for (Component component : components) {
					if (event.getSource() == component) {
						clickInPopup = true;
					}
				}
				if (!clickInPopup) {
					popup.hide();
				}
			}
		}

	}
}
